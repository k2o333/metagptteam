# /root/metagpt/mgfr/metagpt_doc_writer/actions/finalize.py (新增文件)

from metagpt.actions import Action
from metagpt.logs import logger
from typing import ClassVar, Dict
from metagpt_doc_writer.schemas.doc_structures import Task, Plan

class FinalizeDocument(Action):
    """
    一个专门用于在所有任务完成后，将零散的草稿片段整合成
    一篇完整、流畅、格式优美的最终文档的Action。
    """
    PROMPT_TEMPLATE: ClassVar[str] = """
    You are an expert technical editor and a master of document composition. 
    Your final and most important task is to assemble all the provided draft snippets into a single, cohesive, and professional technical document.

    The overall goal of the document is: "{goal}"

    The planned structure of the document is as follows. You should follow this structure to organize the final output:
    --- DOCUMENT PLAN ---
    {plan_details}
    --- END OF PLAN ---

    Here are all the final, revised draft snippets you need to assemble. Each snippet is identified by a unique ID.
    --- FINAL SNIPPETS ---
    {snippets_content}
    --- END OF SNIPPETS ---

    Please now generate the complete, final, and polished version of the document in Markdown format.
    Follow these instructions meticulously:
    1.  Adhere strictly to the planned structure defined in the DOCUMENT PLAN to order and structure the sections.
    2.  Integrate all snippets smoothly, ensuring a logical flow, consistent tone, and seamless transitions between sections.
    3.  Remove all meta-comments, task instructions, snippet IDs, and annotations (like "### Content for Snippet ID: ...", "---"). Your output must be ONLY the pure, final document content.
    4.  Ensure the final output is well-formatted, clean, and ready for publication.

    The final, complete document now:
    """
    


    async def run(self, plan: Plan, snippets: Dict[str, str]) -> str:
        logger.info("Executing FinalizeDocument Action: Assembling final document...")

        # 1. 准备Prompt的输入
        goal = plan.goal
        
        # 2. 格式化计划细节，为LLM提供结构指导
        plan_details = "\n".join([f"{i+1}. {task.instruction}" for i, task in enumerate(plan.tasks)])
        
        # 3. 按计划顺序格式化所有最终的草稿片段
        snippets_content = ""
        # 创建一个从snippet_id到其内容的映射
        snippet_map = {snippet_id: content for snippet_id, content in snippets.items()}
        
        # 遍历计划中的任务，以确保整合顺序的正确性
        ordered_snippet_ids = []
        seen_ids = set()
        for task in plan.tasks:
             if task.target_snippet_id and task.target_snippet_id not in seen_ids:
                ordered_snippet_ids.append(task.target_snippet_id)
                seen_ids.add(task.target_snippet_id)
        
        for snippet_id in ordered_snippet_ids:
            content = snippet_map.get(snippet_id, f"Error: Content for snippet '{snippet_id}' not found.")
            snippets_content += f"### Content for Snippet ID: {snippet_id} ###\n{content}\n\n"

        if not snippets_content:
            logger.warning("No snippets provided to finalize. Returning empty document.")
            return "# Document Finalization Failed: No content snippets were found."

        # 4. 构建并执行最终的LLM调用
        prompt = self.PROMPT_TEMPLATE.format(
            goal=goal,
            plan_details=plan_details,
            snippets_content=snippets_content
        )
        
        logger.info("Calling LLM for final document assembly...")
        final_document = await self.llm.aask(prompt, system_msgs=["You are an expert technical editor."])
        
        logger.success("Final, clean document has been successfully generated by the LLM.")
        return final_document