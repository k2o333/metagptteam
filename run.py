
OUTPUT_PATH = "./data/outputs" # Default output path

import asyncio
from metagpt.logs import logger
from metagpt.team import Team
from metagpt.schema import Message
from metagpt_doc_writer.roles.chief_pm import ChiefPM
from metagpt_doc_writer.roles.task_dispatcher import TaskDispatcher
from metagpt_doc_writer.roles.task_refiner import TaskRefiner
from metagpt_doc_writer.roles.technical_writer import TechnicalWriter
from metagpt_doc_writer.roles.doc_assembler import DocAssembler
from metagpt_doc_writer.roles.changeset_generator import ChangeSetGenerator
from metagpt_doc_writer.roles.doc_modifier import DocModifier
from metagpt_doc_writer.schemas.doc_structures import ProjectPlan

async def main(idea: str):
    logger.info(f"Main function started with idea: {idea}")
    team = Team()
    logger.info("Team hired roles.")
    team.hire([
        ChiefPM(),
        TaskDispatcher(),
        TaskRefiner(),
        TechnicalWriter(),
        DocAssembler(output_path=OUTPUT_PATH),
        ChangeSetGenerator(),
        DocModifier(),
    ])

    logger.info("Running project...")
    team.run_project(idea)
    await team.run(n_round=5)

    # Temporary: Manually trigger DocAssembler to save the document for testing purposes
    # In a real scenario, DocAssembler would be triggered by an Approval message
    # from ChiefPM after the revision loop.
    doc_assembler_role = team.env.roles.get("Document Assembler")
    if doc_assembler_role:
        # Create a dummy FullDraft message for testing
        from metagpt_doc_writer.schemas.doc_structures import FullDraft
        dummy_full_draft = FullDraft(content="# Test Document\n\nThis is a test document generated by the integration test.")
        dummy_message = Message(content="Finalize document", instruct_content=dummy_full_draft)
        team.env.publish_message(dummy_message)

    logger.info("Project finished.")

if __name__ == "__main__":
    asyncio.run(main("Write a simple tutorial about pytest."))
